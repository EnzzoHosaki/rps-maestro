name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feat/**'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validar c√≥digo Go
  lint-and-test:
    name: Lint & Test Go Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maestro_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    env:
      MAESTRO_DB_HOST: localhost
      MAESTRO_DB_PORT: 5432
      MAESTRO_DB_USER: postgres
      MAESTRO_DB_PASSWORD: postgres
      MAESTRO_DB_NAME: maestro_db
      MAESTRO_RABBITMQ_HOST: localhost
      MAESTRO_RABBITMQ_PORT: 5672
      MAESTRO_RABBITMQ_USER: guest
      MAESTRO_RABBITMQ_PASSWORD: guest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U user 2>/dev/null; then
              echo "‚úÖ PostgreSQL is ready"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done
          
          echo "‚è≥ Waiting for RabbitMQ to be ready..."
          for i in {1..30}; do
            if nc -z localhost 5672 2>/dev/null; then
              echo "‚úÖ RabbitMQ is ready"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run go mod download
        run: go mod download

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Go fmt issues found:"
            gofmt -s -d .
            exit 1
          fi
          echo "‚úÖ Go fmt check passed"

      - name: Run go vet
        run: |
          echo "üîç Running go vet..."
          go vet ./...
          echo "‚úÖ go vet passed"

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Build application
        run: |
          echo "üî® Building application..."
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o rps-maestro ./cmd/api
          echo "‚úÖ Build successful"

      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          go test -v -race -coverprofile=coverage.out ./...
          echo "‚úÖ Tests passed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 2: Build Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name == 'push'
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true

  # Job 4: Deploy (apenas para main branch e self-hosted)
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [lint-and-test, build-docker]
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-production-url.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        env:
          MAESTRO_ENV_FILE: ${{ secrets.MAESTRO_ENV_FILE }}
        run: |
          mkdir -p ${{ secrets.MAESTRO_DEPLOY_PATH }}
          echo "$MAESTRO_ENV_FILE" > ${{ secrets.MAESTRO_DEPLOY_PATH }}/.env
          echo "‚úÖ .env file created successfully"

      - name: Deploy with Docker Compose
        working-directory: ${{ secrets.MAESTRO_DEPLOY_PATH }}
        run: |
          echo "üöÄ Starting deployment..."
          docker-compose pull maestro-backend
          docker-compose up -d --no-deps maestro-backend
          echo "‚úÖ Deployment completed"

      - name: Health check
        run: |
          echo "üè• Checking application health..."
          sleep 5
          if curl -f http://localhost:8080/health || true; then
            echo "‚úÖ Application is healthy"
          else
            echo "‚ö†Ô∏è Warning: Health check endpoint not responding (this may be normal if not implemented)"
          fi

      - name: Cleanup old images
        run: |
          echo "üßπ Cleaning up old Docker images..."
          docker image prune -f
          echo "‚úÖ Cleanup completed"

  # Job 5: Notify on failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: failure()
    needs: [lint-and-test, build-docker, security-scan]
    
    steps:
      - name: Send failure notification
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Job 6: Comment on PR with results
  pr-comment:
    name: Comment PR Results
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    if: github.event_name == 'pull_request'
    needs: [lint-and-test, build-docker, security-scan]
    
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const lintStatus = '${{ needs.lint-and-test.result }}' == 'success' ? '‚úÖ Passed' : '‚ùå Failed';
            const buildStatus = '${{ needs.build-docker.result }}' == 'success' ? '‚úÖ Built' : '‚ùå Failed';
            const securityStatus = '${{ needs.security-scan.result }}' == 'success' ? '‚úÖ No issues' : '‚ö†Ô∏è Check results';
            
            const comment = `## CI/CD Pipeline Results
            
            | Check | Status |
            |-------|--------|
            | Lint & Tests | ${lintStatus} |
            | Docker Build | ${buildStatus} |
            | Security Scan | ${securityStatus} |
            
            [View full workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
