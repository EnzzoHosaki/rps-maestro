name: Deploy Maestro Backend (Legacy)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: self-hosted
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: image
        run: |
          echo "tag=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Prepare deployment directory
        env:
          MAESTRO_ENV_FILE: ${{ secrets.MAESTRO_ENV_FILE }}
        run: |
          PROD_PATH="${{ secrets.MAESTRO_DEPLOY_PATH }}"
          
          echo "üìã Deployment Information:"
          echo "  Deploy Path: $PROD_PATH"
          echo "  Environment: ${{ github.event.inputs.environment }}"
          echo "  Triggered by: ${{ github.actor }}"
          echo "  Image Tag: sha-${{ github.sha }}"
          
          # Criar o diret√≥rio
          mkdir -p "$PROD_PATH"
          
          # Copiar docker-compose de produ√ß√£o
          cp docker-compose.prod.yml "$PROD_PATH/docker-compose.yml"
          echo "‚úÖ Docker Compose file copied"
          
          # Criar o arquivo .env
          if [ -z "$MAESTRO_ENV_FILE" ]; then
            echo "‚ö†Ô∏è  Warning: MAESTRO_ENV_FILE secret is empty"
          else
            echo "$MAESTRO_ENV_FILE" > "$PROD_PATH/.env"
            echo "IMAGE_TAG=sha-${{ github.sha }}" >> "$PROD_PATH/.env"
            echo "‚úÖ .env file created with image tag"
          fi

      - name: Deploy with Docker Compose
        working-directory: ${{ secrets.MAESTRO_DEPLOY_PATH }}
        run: |
          echo "üöÄ Starting deployment..."
          
          # Pull latest image
          echo "üöÄ Pulling image: ${{ steps.image.outputs.tag }}"
          docker pull ${{ steps.image.outputs.tag }}
          
          # Start or restart services
          echo "üöÄ Starting services..."
          docker-compose up -d --no-build
          
          # Cleanup old images
          echo "üßπ Cleaning up old images..."
          docker image prune -af --filter "until=72h"
          
          echo "‚úÖ Deployment completed"

      - name: Health check
        run: |
          echo "üè• Waiting for application..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/v1/health 2>/dev/null; then
              echo "‚úÖ Application is healthy"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          echo "‚ö†Ô∏è  Health check timed out (endpoint may not be implemented)"
          exit 0