# docker-compose.automations.yml
# Exemplo de docker-compose para containers de automações
# Os containers de automação podem se conectar à rede maestro-network para acessar o PostgreSQL e RabbitMQ

services:
  # Exemplo de automação Python
  automation-example:
    build:
      context: ./automations/example
      dockerfile: Dockerfile
    container_name: automation_example
    environment:
      # Variáveis de ambiente para conexão com os serviços do Maestro
      - POSTGRES_HOST=maestro_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=maestro_db
      - RABBITMQ_HOST=maestro_rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - MAESTRO_API_URL=http://maestro_backend:8000
    networks:
      - maestro-network
    # Modo restart para que a automação reinicie em caso de falha
    restart: unless-stopped
    # Dependências para garantir que os serviços do Maestro estejam rodando
    depends_on:
      - maestro_postgres
      - maestro_rabbitmq

  # Exemplo de worker Python para consumir mensagens do RabbitMQ
  automation-worker:
    build:
      context: ./automations/worker
      dockerfile: Dockerfile
    container_name: automation_worker
    environment:
      - POSTGRES_HOST=maestro_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=maestro_db
      - RABBITMQ_HOST=maestro_rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - QUEUE_NAME=automation_jobs
    networks:
      - maestro-network
    restart: unless-stopped
    depends_on:
      - maestro_postgres
      - maestro_rabbitmq

networks:
  maestro-network:
    external: true
    name: maestro-network
